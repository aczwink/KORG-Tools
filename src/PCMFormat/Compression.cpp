/*
 * Copyright (c) 2021 Amir Czwink (amir130@hotmail.de)
 *
 * This file is part of KORG-Tools.
 *
 * KORG-Tools is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * KORG-Tools is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KORG-Tools.  If not, see <http://www.gnu.org/licenses/>.
 */
//Class header
#include <libkorg/Sample/Compression.hpp>
//Namespaces
using namespace libKORG;
using namespace StdXX;

const static float32 table[256] =
{
	-1.0, -0.9574369788169861, -0.9166790246963501, -0.8776479959487915, -0.8402730226516724, -0.804481029510498, -0.7702080011367798, -0.7373870015144348,
	-0.7059580087661743, -0.6758620142936707, -0.6470410227775574, -0.6194419860839844, -0.5930140018463135, -0.5677059888839722, -0.5434709787368774, -0.5202630162239075,
	-0.49803900718688965, -0.4767580032348633, -0.4563789963722229, -0.4368630051612854, -0.41817501187324524, -0.4002799987792969, -0.38314300775527954, -0.36673301458358765,
	-0.3510180115699768, -0.335970014333725, -0.32155999541282654, -0.30776000022888184, -0.2945460081100464, -0.28189200162887573, -0.2697739899158478, -0.2581709921360016,
	-0.24705900251865387, -0.2364179939031601, -0.2262279987335205, -0.21647100150585175, -0.20712700486183167, -0.19817900657653809, -0.18961100280284882, -0.18140600621700287,
	-0.17354799807071686, -0.16602399945259094, -0.15881900489330292, -0.15191900730133057, -0.14531199634075165, -0.13898499310016632, -0.13292600214481354, -0.12712499499320984,
	-0.12156900018453598, -0.1162479966878891, -0.1111529991030693, -0.10627499967813492, -0.10160300135612488, -0.09712900221347809, -0.09284500032663345, -0.08874200284481049,
	-0.08481299877166748, -0.08105099946260452, -0.0774490013718605, -0.07399900257587433, -0.07069499790668488, -0.0675320029258728, -0.06450200080871582, -0.061601001769304276,
	-0.058823999017477036, -0.0561630018055439, -0.0536159984767437, -0.051176998764276505, -0.048840999603271484, -0.04660400003194809, -0.04446199908852577, -0.042410001158714294,
	-0.040445998311042786, -0.03856499865651131, -0.0367639996111393, -0.03503900021314621, -0.03338700160384178, -0.03180500119924545, -0.03029000014066696, -0.028839999809861183,
	-0.02745099924504757, -0.026120999827980995, -0.02484700083732605, -0.02362699992954731, -0.0224590003490448, -0.021340999752283096, -0.020269999280571938, -0.0192440003156662,
	-0.018262000754475594, -0.017322000116109848, -0.0164209995418787, -0.015558999963104725, -0.014732999727129936, -0.013942000456154346, -0.013183999806642532, -0.012458999641239643,
	-0.01176500041037798, -0.011099999770522118, -0.010463000275194645, -0.009852999821305275, -0.00926900003105402, -0.008709999732673168, -0.008174000307917595, -0.007660999894142151,
	-0.007170000113546848, -0.0066999997943639755, -0.0062500000931322575, -0.005818000063300133, -0.0054060001857578754, -0.005009999964386225, -0.004631000105291605, -0.004269000142812729,
	-0.00392200006172061, -0.0035890000872313976, -0.0032709999941289425, -0.002966000000014901, -0.0026740001048892736, -0.002394000068306923, -0.002125999890267849, -0.0018700000364333391,
	-0.0016240000259131193, -0.0013889999827370048, -0.001164000015705824, -0.0009480000007897615, -0.000742000003810972, -0.0005440000095404685, -0.0003549999964889139, -0.0001740000006975606,
	0.0, 0.0001740000006975606, 0.0003549999964889139, 0.0005440000095404685, 0.000742000003810972, 0.0009480000007897615, 0.001164000015705824, 0.0013889999827370048,
	0.0016240000259131193, 0.0018700000364333391, 0.002125999890267849, 0.002394000068306923, 0.0026740001048892736, 0.002966000000014901, 0.0032709999941289425, 0.0035890000872313976,
	0.00392200006172061, 0.004269000142812729, 0.004631000105291605, 0.005009999964386225, 0.0054060001857578754, 0.005818000063300133, 0.0062500000931322575, 0.0066999997943639755,
	0.007170000113546848, 0.007660999894142151, 0.008174000307917595, 0.008709999732673168, 0.00926900003105402, 0.009852999821305275, 0.010463000275194645, 0.011099999770522118,
	0.01176500041037798, 0.012458999641239643, 0.013183999806642532, 0.013942000456154346, 0.014732999727129936, 0.015558999963104725, 0.0164209995418787, 0.017322000116109848,
	0.018262000754475594, 0.0192440003156662, 0.020269999280571938, 0.021340999752283096, 0.0224590003490448, 0.02362699992954731, 0.02484700083732605, 0.026120999827980995,
	0.02745099924504757, 0.028839999809861183, 0.03029000014066696, 0.03180500119924545, 0.03338700160384178, 0.03503900021314621, 0.0367639996111393, 0.03856499865651131,
	0.040445998311042786, 0.042410001158714294, 0.04446199908852577, 0.04660400003194809, 0.048840999603271484, 0.051176998764276505, 0.0536159984767437, 0.0561630018055439,
	0.058823999017477036, 0.061601001769304276, 0.06450200080871582, 0.0675320029258728, 0.07069499790668488, 0.07399900257587433, 0.0774490013718605, 0.08105099946260452,
	0.08481299877166748, 0.08874200284481049, 0.09284500032663345, 0.09712900221347809, 0.10160300135612488, 0.10627499967813492, 0.1111529991030693, 0.1162479966878891,
	0.12156900018453598, 0.12712499499320984, 0.13292600214481354, 0.13898499310016632, 0.14531199634075165, 0.15191900730133057, 0.15881900489330292, 0.16602399945259094,
	0.17354799807071686, 0.18140600621700287, 0.18961100280284882, 0.19817900657653809, 0.20712700486183167, 0.21647100150585175, 0.2262279987335205, 0.2364179939031601,
	0.24705900251865387, 0.2581709921360016, 0.2697739899158478, 0.28189200162887573, 0.2945460081100464, 0.30776000022888184, 0.32155999541282654, 0.335970014333725,
	0.3510180115699768, 0.36673301458358765, 0.38314300775527954, 0.4002799987792969, 0.41817501187324524, 0.4368630051612854, 0.4563789963722229, 0.4767580032348633,
	0.49803900718688965, 0.5202630162239075, 0.5434709787368774, 0.5677059888839722, 0.5930140018463135, 0.6194419860839844, 0.6470410227775574, 0.6758620142936707,
	0.7059580087661743, 0.7373870015144348, 0.7702080011367798, 0.804481029510498, 0.8402730226516724, 0.8776479959487915, 0.9166790246963501, 0.9574369788169861
};

void Sample::Decompress(const uint8* compressedSamples, int16* uncompressedSamples, uint32 nSamples, int16 coef1, int16 coef2)
{
	uint16 twoPow15 = Signed<int16>::Max() + 1;
	const float64 magic = 1 / float64(twoPow15 / 2);
	const float64 gain = 1;

	const float64 gain_scaled = gain * twoPow15;
	const float64 coef1_scaled = coef1 * magic;
	const float64 coef2_scaled = coef2 * magic;

	float64 tmp1 = 0, tmp2 = 0;
	for(uint32 i = 0; i < nSamples; i++)
	{
		int8 currentSample = (int8)compressedSamples[i];
		uint32 index = 128 + currentSample;
		float32 lookup = table[index];

		float64 nextSample = (tmp2 * coef2_scaled) + (tmp1 * coef1_scaled) + lookup;

		tmp2 = tmp1;
		tmp1 = nextSample;

		uncompressedSamples[i] = (int16)Math::Clamp(nextSample * gain_scaled, (float64)(Signed<int16>::Min() + 1), (float64)Signed<int16>::Max());
	}
}